# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/
project_1/base/dst-3.0_16_1_hh_database.csv
PY_10: Введение в Pandas/beginning.py
PY_10: Введение в Pandas/data/countries.csv
PY_10: Введение в Pandas/data/melb_data.csv
PY_10: Введение в Pandas/data/students_performance.csv
PY_11: Базовые приемы работы с данными в  Pandas/beginning_2
PY_11: Базовые приемы работы с данными в  Pandas/Task 6
PY_11: Базовые приемы работы с данными в  Pandas/ufo sights
PY_11: Базовые приемы работы с данными в  Pandas/data/melb_data_ps.csv
PY_12: Продвинутые методы работы с данными в Pandas/beginning
PY_12: Продвинутые методы работы с данными в Pandas/products_orders
PY_12: Продвинутые методы работы с данными в Pandas/data/melb_data_fe.csv
PY_12: Продвинутые методы работы с данными в Pandas/data/movies_data/dates.csv
PY_12: Продвинутые методы работы с данными в Pandas/data/movies_data/movies.csv
PY_12: Продвинутые методы работы с данными в Pandas/data/movies_data/ratings_movies.csv
PY_12: Продвинутые методы работы с данными в Pandas/data/movies_data/ratings1.csv
PY_12: Продвинутые методы работы с данными в Pandas/data/movies_data/ratings2.csv
PY_12: Продвинутые методы работы с данными в Pandas/data/orders_and_products/orders.csv
PY_12: Продвинутые методы работы с данными в Pandas/data/orders_and_products/products.csv
PY_13: Визуализация данных/beginning
PY_13: Визуализация данных/covid.ipynb
PY_13: Визуализация данных/data/churn.csv
PY_13: Визуализация данных/data/country_vaccinations.csv
PY_13: Визуализация данных/data/covid_data.csv
PY_14: Очистка данных/Diabetes.ipynb
PY_14: Очистка данных/sber-jvsc-d3db902a-08dc-4b3d-9617-2166e250552a.ipynb
PY_14: Очистка данных/sber.ipynb
PY_14: Очистка данных/data/diabetes_data.csv
PY_14: Очистка данных/data/sber_data.csv
PY_15: Принципы ООП в Python и отладка кода/test.ipynb
